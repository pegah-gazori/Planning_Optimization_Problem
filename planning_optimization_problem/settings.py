"""
Django settings for planning_optimization_problem project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-08_3ounfw2#&g3_c0gm1tw!-6)qwmx#&v59ug6cznj#n5o)d@o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'frontier',
    'router',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'planning_optimization_problem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'planning_optimization_problem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# RabbitMQ Configurations:

RABBITMQ_HOST = os.environ.get('RABBITMQ_HOST', '127.0.0.1')
RABBITMQ_USERNAME = os.environ.get('RABBITMQ_USERNAME', 'guest')
RABBITMQ_PASSWORD = os.environ.get('RABBITMQ_PASSWORD', 'guest')
RABBITMQ_INBOUND_QUEUE = os.environ.get('RABBITMQ_INBOUND_QUEUE', 'inbound_queue')
RABBITMQ_INBOUND_EXCHANGE = os.environ.get('RABBITMQ_INBOUND_EXCHANGE', 'inbound_exchange')
RABBITMQ_INBOUND_ROUTING_KEY = os.environ.get('RABBITMQ_INBOUND_ROUTING_KEY', 'complex?inbound!routing$key')
RABBITMQ_OUTBOUND_QUEUE = os.environ.get('RABBITMQ_OUTBOUNG_QUEUE', 'outbound_queue')
RABBITMQ_OUTBOUND_EXCHANGE = os.environ.get('RABBITMQ_OUTBOUNG_EXCHANGE', 'outbound_exchange')
RABBITMQ_OUTBOUND_ROUTING_KEY = os.environ.get('RABBITMQ_OUTBOUND_ROUTING_KEY', 'complex?outbound!routing$key')


# Redis Configurations:

REDIS_HOST = os.environ.get('REDIS_HOST', '127.0.0.1')


# Celery Configurations:

CELERY_ENABLED = True
CELERY_RESULT_BACKEND = 'redis://' + REDIS_HOST + ':6379'
CELERY_BROKER_URL = 'amqp://guest:guest@' + RABBITMQ_HOST + ':5672/'
CELERY_TIMEZONE = 'Asia/Tehran'
CELERY_ACCEPT_CONTENT = ['application/json']
cCELERY_RESULT_SERIALIZER = 'json'
CELERY_RESULT_EXPIRES = 900
CELERYD_TASK_SOFT_TIME_LIMIT = 900


# Logging Configurations:

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'formatter': 'simple',
            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARNING'),
            'propagate': True,
        },
    },
}
